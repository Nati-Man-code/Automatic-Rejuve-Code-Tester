name: Automated Testing Workflow

on:
  push:
    branches: ["main"]
    paths:
    - 'biocypher_metta/adapters/**'
    - 'biocypher_metta/*.py'
    - 'config/adapters_config_sample.yaml'
    - 'create_knowledge_graph.py'
  pull_request:
    branches: ["main"]
    paths:
    - 'biocypher_metta/adapters/**'
    - 'biocypher_metta/*.py'
    - 'config/adapters_config_sample.yaml'
    - 'create_knowledge_graph.py'

jobs:
  detect_changes:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Detect Changes
      id: detect_changes
      run: |
        CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
        echo "Changed files: $CHANGED_FILES"

        if echo "$CHANGED_FILES" | grep -q 'biocypher_metta/adapters/'; then
          changed_adapters=true
        else
          changed_adapters=false
        fi

        if echo "$CHANGED_FILES" | grep -q 'biocypher_metta/\(metta\|neo4j_csv\|prolog\)_writer.py'; then
          changed_writers=true
        else
          changed_writers=false
        fi

        if echo "$CHANGED_FILES" | grep -q 'config/adapters_config_sample.yaml'; then
          changed_config=true
        else
          changed_config=false
        fi

        if echo "$CHANGED_FILES" | grep -q 'create_knowledge_graph.py'; then
          changed_main_script=true
        else
          changed_main_script=false
        fi

        echo "changed_adapters=$changed_adapters" >> $GITHUB_ENV
        echo "changed_writers=$changed_writers" >> $GITHUB_ENV
        echo "changed_config=$changed_config" >> $GITHUB_ENV
        echo "changed_main_script=$changed_main_script" >> $GITHUB_ENV

  prepare_test_config:
    needs: detect_changes
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: [3.8, 3.9, 3.10]
    - name: Install PyYAML
      run: pip install PyYAML
    - name: Prepare Test Config
      run: |
        if [ "${{ env.changed_adapters }}" == 'true' ] || [ "${{ env.changed_config }}" == 'true' ]; then
          echo "Generating updated test config..."
          python .github/scripts/prepare_config.py "${{ env.changed_adapters }}" "${{ env.changed_config }}"
        else
          echo "No config or adapter changes detected. Using sample config."
          cp config/adapters_config_sample.yaml config/test_config.yaml

  run_tests:
    needs: [detect_changes, prepare_test_config]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        writer_type: [metta_writer, neo4j_writer, prolog_writer]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: [3.8, 3.9, 3.10] #for multiple versions
    - name: Install dependencies
      run: |
        pip install poetry
        poetry install
    - name: Run Tests
      run: |
        set -e
        WRITER_TYPE=${{ matrix.writer_type }}
        CHANGED_CONFIG=${{ env.changed_config }}
        CHANGED_WRITERS=${{ env.changed_writers }}
        CHANGED_ADAPTERS=${{ env.changed_adapters }}
        CHANGED_MAIN_SCRIPT=${{ env.changed_main_script }}

        if [ "$CHANGED_MAIN_SCRIPT" == "true" ]; then
          echo "Main script changed. Running all tests with full sample config."
          poetry run pytest --config config/adapters_config_sample.yaml
        elif [ "$CHANGED_WRITERS" == "true" ]; then
          echo "Writer changed: $WRITER_TYPE. Running all adapters with full config."
          poetry run pytest --config config/adapters_config_sample.yaml --writer $WRITER_TYPE
        elif [ "$CHANGED_ADAPTERS" == "true" ] || [ "$CHANGED_CONFIG" == "true" ]; then
          echo "Adapters/changed config. Running tests for updated adapters."
          poetry run pytest --config config/test_config.yaml --writer $WRITER_TYPE
        else
          echo "No significant changes detected."
